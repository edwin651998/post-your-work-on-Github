import time
import pandas as pd

CITY_DATA = {
    'chicago': 'chicago.csv',
    'new york city': 'new_york_city.csv',
    'washington': 'washington.csv'
}

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')

    # Prompt for city input and validate
    while True:
        city = input('Enter the city you want to see data for (Chicago, New York City, or Washington): ').lower()
        if city in CITY_DATA:
            break
        else:
            print('Invalid city name. Please try again.')

    # Prompt for month input
    months = ['all', 'january', 'february', 'march', 'april', 'may', 'june']
    while True:
        month = input('Enter the month - January to June OR Enter "all" for no month filter: ').lower()
        if month in months:
            break
        else:
            print('Invalid month. Please try again.')

    # Prompt for day input
    days = ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    while True:
        day = input('Enter the day - Monday to Sunday OR Enter "all" for no day filter: ').lower()
        if day in days:
            break
        else:
            print('Invalid day. Please try again.')

    print('-'*40)
    return city, month, day



def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    file_name = CITY_DATA[city]
    df = pd.read_csv(file_name)

    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['hour'] = df['Start Time'].dt.hour

    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]

    if day != 'all':
        df = df[df['day_of_week'] == day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    m = df['month'].mode()[0]
    print(f'Most common month: {m}')

    d = df['day_of_week'].mode()[0]
    print(f'Most common day of week: {d}')

    h = df['hour'].mode()[0]
    print(f'Most common start hour: {h}')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    ss = df['Start Station'].mode()[0]
    print(f'Most common start station: {ss}')

    es = df['End Station'].mode()[0]
    print(f'Most common end station: {es}')

    cs = df.groupby(['Start Station', 'End Station']).size().nlargest(1)
    print(f'Most frequent combination of start station and end station trip: {cs}')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    tt = df['Trip Duration'].sum()
    print(f'Total travel time: {tt}')

    mt = df['Trip Duration'].mean()
    print(f'Mean travel time: {mt}')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    ty = df['User Type'].value_counts()
    print(f'Counts of the user types:\n{ty}')

    if 'Gender' in df.columns:
        gender = df['Gender'].value_counts()
        print(f'Counts of gender:\n{gender}\n')

    if 'Birth Year' in df.columns:
        print('Earliest year of Birth:', df['Birth Year'].min())
        print('Most Recent year of Birth:', df['Birth Year'].max())
        print('Most Common year of Birth:', df['Birth Year'].mode()[0])

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def display_data(df):
    """
    Displays individual trip data from the DataFrame.

    Args:
        df - Pandas DataFrame containing the trip data
    """
    start_loc = 0
    while True:
        view_data = input('\nWould you like to view 5 rows of individual trip data? Enter yes or no: ').lower()
        if view_data != 'yes':
            break
        print(df.iloc[start_loc:start_loc + 5])
        start_loc += 5


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_data(df)

        restart = input('\nWould you like to restart? Enter yes or no: ').lower()
        if restart != 'yes':
            break


if __name__ == "__main__":
    main()
